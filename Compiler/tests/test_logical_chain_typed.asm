; Addr row[]
; Addr col[]
; Addr box[]
; Byte num
; Byte ok
; Addr val
; Byte i
; Byte j
; Byte box_index
PUSHN 13
PUSH_REG 1
STORE_LOCAL16 0 ; row
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH_REG 1
STORE_LOCAL16 2 ; col
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH_REG 1
STORE_LOCAL16 4 ; box
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
MACRO_SET_LOCAL 6 3
PUSH16 #1
LOAD_LOCAL 6 ; num
MACRO_LSH16_BY8
STORE_LOCAL16 8 ; val
MACRO_SET_LOCAL 10 1
MACRO_SET_LOCAL 11 2
MACRO_SET_LOCAL 12 3
LOAD_LOCAL16 0 ; row
LOAD_LOCAL 10 ; i
MACRO_POP_EXT_X2_ADD16_LG16
LOAD_LOCAL16 8 ; val
AND16
DUP16
JT16 @cond1_expr_end
LOAD_LOCAL16 2 ; col
LOAD_LOCAL 11 ; j
MACRO_POP_EXT_X2_ADD16_LG16
LOAD_LOCAL16 8 ; val
AND16
OR16
DUP16
JT16 @cond1_expr_end
LOAD_LOCAL16 4 ; box
LOAD_LOCAL 12 ; box_index
MACRO_POP_EXT_X2_ADD16_LG16
LOAD_LOCAL16 8 ; val
AND16
OR16
:cond1_expr_end
JF16 @if1_else
MACRO_SET_LOCAL 7 0
JMP @if1_endif
:if1_else
MACRO_SET_LOCAL 7 1
:if1_endif
HALT