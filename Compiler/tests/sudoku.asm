; Byte mat[]
; Addr row[]
; Addr col[]
; Addr box[]
; Byte r
; Byte c
; Byte index
; Addr val
; Byte box_index
PUSHN 14
PUSH_REG 1
STORE_LOCAL16 0 ; mat
PUSH 3
PUSH 0
PUSH 6
PUSH 5
PUSH 0
PUSH 8
PUSH 4
PUSH 0
PUSH 0
PUSH 5
PUSH 2
PUSH 0
PUSH 0
PUSH 0
PUSH 0
PUSH 0
PUSH 0
PUSH 0
PUSH 0
PUSH 8
PUSH 7
PUSH 0
PUSH 0
PUSH 0
PUSH 0
PUSH 3
PUSH 1
PUSH 0
PUSH 0
PUSH 3
PUSH 0
PUSH 1
PUSH 0
PUSH 0
PUSH 8
PUSH 0
PUSH 9
PUSH 0
PUSH 0
PUSH 8
PUSH 6
PUSH 3
PUSH 0
PUSH 0
PUSH 5
PUSH 0
PUSH 5
PUSH 0
PUSH 0
PUSH 9
PUSH 0
PUSH 6
PUSH 0
PUSH 0
PUSH 1
PUSH 3
PUSH 0
PUSH 0
PUSH 0
PUSH 0
PUSH 2
PUSH 5
PUSH 0
PUSH 0
PUSH 0
PUSH 0
PUSH 0
PUSH 0
PUSH 0
PUSH 0
PUSH 7
PUSH 4
PUSH 0
PUSH 0
PUSH 5
PUSH 2
PUSH 0
PUSH 6
PUSH 3
PUSH 0
PUSH 0
PUSH_REG 1
STORE_LOCAL16 2 ; row
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH_REG 1
STORE_LOCAL16 4 ; col
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH_REG 1
STORE_LOCAL16 6 ; box
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
MACRO_SET_LOCAL 8 0
:while4_begin
LOAD_LOCAL 8 ; r
PUSH 9
MACRO_CONDITIONAL_JF 4 @while4_endwhile
MACRO_SET_LOCAL 9 0
:while5_begin
LOAD_LOCAL 9 ; c
PUSH 9
MACRO_CONDITIONAL_JF 4 @while5_endwhile
LOAD_LOCAL 8 ; r
MULC 9
LOAD_LOCAL 9 ; c
ADD
STORE_LOCAL 10 ; index
LOAD_LOCAL16 0 ; mat
LOAD_LOCAL 10 ; index
MACRO_ADD8_TO_16
LOAD_GLOBAL
MACRO_CONDITIONAL_JF 7 @if7_endif
PUSH16 #1
LOAD_LOCAL16 0 ; mat
LOAD_LOCAL 10 ; index
MACRO_ADD8_TO_16
LOAD_GLOBAL
MACRO_LSH16_BY8
STORE_LOCAL16 11 ; val
LOAD_LOCAL16 2 ; row
LOAD_LOCAL 8 ; r
MACRO_POP_EXT_X2_ADD16_LG16
LOAD_LOCAL16 11 ; val
OR16
STORE_GLOBAL_PTR16
LOAD_LOCAL16 4 ; col
LOAD_LOCAL 9 ; c
MACRO_POP_EXT_X2_ADD16_LG16
LOAD_LOCAL16 11 ; val
OR16
STORE_GLOBAL_PTR16
LOAD_LOCAL 8 ; r
MACRO_DIV3
MULC 3
LOAD_LOCAL 9 ; c
MACRO_DIV3
ADD
STORE_LOCAL 13 ; box_index
LOAD_LOCAL16 6 ; box
LOAD_LOCAL 13 ; box_index
MACRO_POP_EXT_X2_ADD16_LG16
LOAD_LOCAL16 11 ; val
OR16
STORE_GLOBAL_PTR16
:if7_endif
MACRO_INC_LOCAL 9 ;c
JMP @while5_begin
:while5_endwhile
MACRO_INC_LOCAL 8 ;r
JMP @while4_begin
:while4_endwhile
PUSH 0 ; rv
LOAD_LOCAL16 0 ; mat
PUSH 0
PUSH 0
LOAD_LOCAL16 2 ; row
LOAD_LOCAL16 4 ; col
LOAD_LOCAL16 6 ; box
CALL @function_sudokuSolverRec
POPN 11
LOAD_LOCAL16 0 ; mat
CALL @function_print_sudoku
POPN 2
HALT
:function_print_sudoku
;(Byte matrix[])
; Byte r
; Byte c
; Byte index
PUSHN 3
MACRO_SET_LOCAL 0 0
:while1_begin
LOAD_LOCAL 0 ; r
PUSH 9
MACRO_CONDITIONAL_JF 4 @while1_endwhile
MACRO_SET_LOCAL 1 0
:while2_begin
LOAD_LOCAL 1 ; c
PUSH 9
MACRO_CONDITIONAL_JF 4 @while2_endwhile
LOAD_LOCAL 0 ; r
MULC 9
LOAD_LOCAL 1 ; c
ADD
STORE_LOCAL 2 ; index
LOAD_ARG16 2 ; matrix
LOAD_LOCAL 2 ; index
MACRO_ADD8_TO_16
LOAD_GLOBAL
SYSCALL Std.PrintInt
POP
PUSH 32
SYSCALL Std.PrintCharPop
MACRO_INC_LOCAL 1 ;c
JMP @while2_begin
:while2_endwhile
SYSCALL Std.PrintNewLine
MACRO_INC_LOCAL 0 ;r
JMP @while1_begin
:while1_endwhile
RET
:function_sudokuSolverRec
;(Byte @ret&, Byte mat[], Byte i, Byte j, Addr row[], Addr col[], Addr box[])
; Byte ok
; Byte index
; Byte num
; Byte box_index
; Addr val
PUSHN 6
LOAD_ARG 8 ; i
PUSH 8
EQ
DUP
JF @cond1_expr_end
LOAD_ARG 7 ; j
PUSH 9
EQ
AND
:cond1_expr_end
JF @if1_endif
PUSH 1
STORE_ARG 11 ; @ret
RET
:if1_endif
LOAD_ARG 7 ; j
PUSH 9
MACRO_CONDITIONAL_JF 0 @if2_endif
LOAD_ARG 8 ; i
INC
STORE_ARG 8 ; i
PUSH 0
STORE_ARG 7 ; j
:if2_endif
LOAD_ARG 8 ; i
MULC 9
LOAD_ARG 7 ; j
ADD
STORE_LOCAL 1 ; index
LOAD_ARG16 10 ; mat
LOAD_LOCAL 1 ; index
MACRO_ADD8_TO_16
LOAD_GLOBAL
MACRO_CONDITIONAL_JF 7 @if3_endif
PUSH 0 ; rv
LOAD_ARG16 10 ; mat
LOAD_ARG 8 ; i
LOAD_ARG 7 ; j
INC
LOAD_ARG16 6 ; row
LOAD_ARG16 4 ; col
LOAD_ARG16 2 ; box
CALL @function_sudokuSolverRec
POPN 10
STORE_ARG 11 ; @ret
RET
:if3_endif
MACRO_SET_LOCAL 2 1
:while3_begin
LOAD_LOCAL 2 ; num
PUSH 9
MACRO_CONDITIONAL_JF 5 @while3_endwhile
LOAD_ARG 8 ; i
MACRO_DIV3
MULC 3
LOAD_ARG 7 ; j
MACRO_DIV3
ADD
STORE_LOCAL 3 ; box_index
PUSH16 #1
LOAD_LOCAL 2 ; num
MACRO_LSH16_BY8
STORE_LOCAL16 4 ; val
LOAD_ARG16 6 ; row
LOAD_ARG 8 ; i
MACRO_POP_EXT_X2_ADD16_LG16
LOAD_LOCAL16 4 ; val
AND16
DUP16
JT16 @cond2_expr_end
LOAD_ARG16 4 ; col
LOAD_ARG 7 ; j
MACRO_POP_EXT_X2_ADD16_LG16
LOAD_LOCAL16 4 ; val
AND16
OR16
DUP16
JT16 @cond2_expr_end
LOAD_ARG16 2 ; box
LOAD_LOCAL 3 ; box_index
MACRO_POP_EXT_X2_ADD16_LG16
LOAD_LOCAL16 4 ; val
AND16
OR16
:cond2_expr_end
JF16 @if4_else
MACRO_SET_LOCAL 0 0
JMP @if4_endif
:if4_else
MACRO_SET_LOCAL 0 1
:if4_endif
LOAD_LOCAL 0 ; ok
JF @if5_endif
LOAD_LOCAL 2 ; num
LOAD_ARG16 10 ; mat
LOAD_LOCAL 1 ; index
MACRO_ADD8_TO_16
STORE_GLOBAL
LOAD_ARG16 6 ; row
LOAD_ARG 8 ; i
MACRO_POP_EXT_X2_ADD16_LG16
LOAD_LOCAL16 4 ; val
OR16
STORE_GLOBAL_PTR16
LOAD_ARG16 4 ; col
LOAD_ARG 7 ; j
MACRO_POP_EXT_X2_ADD16_LG16
LOAD_LOCAL16 4 ; val
OR16
STORE_GLOBAL_PTR16
LOAD_ARG16 2 ; box
LOAD_LOCAL 3 ; box_index
MACRO_POP_EXT_X2_ADD16_LG16
LOAD_LOCAL16 4 ; val
OR16
STORE_GLOBAL_PTR16
PUSH 0 ; rv
LOAD_ARG16 10 ; mat
LOAD_ARG 8 ; i
LOAD_ARG 7 ; j
INC
LOAD_ARG16 6 ; row
LOAD_ARG16 4 ; col
LOAD_ARG16 2 ; box
CALL @function_sudokuSolverRec
POPN 10
STORE_LOCAL 0 ; ok
LOAD_LOCAL 0 ; ok
JF @if6_endif
PUSH 1
STORE_ARG 11 ; @ret
RET
:if6_endif
PUSH 0
LOAD_ARG16 10 ; mat
LOAD_LOCAL 1 ; index
MACRO_ADD8_TO_16
STORE_GLOBAL
LOAD_LOCAL16 4 ; val
FLIP16
STORE_LOCAL16 4 ; val
LOAD_ARG16 6 ; row
LOAD_ARG 8 ; i
MACRO_POP_EXT_X2_ADD16_LG16
LOAD_LOCAL16 4 ; val
AND16
STORE_GLOBAL_PTR16
LOAD_ARG16 4 ; col
LOAD_ARG 7 ; j
MACRO_POP_EXT_X2_ADD16_LG16
LOAD_LOCAL16 4 ; val
AND16
STORE_GLOBAL_PTR16
LOAD_ARG16 2 ; box
LOAD_LOCAL 3 ; box_index
MACRO_POP_EXT_X2_ADD16_LG16
LOAD_LOCAL16 4 ; val
AND16
STORE_GLOBAL_PTR16
:if5_endif
MACRO_INC_LOCAL 2 ;num
JMP @while3_begin
:while3_endwhile
PUSH 0
STORE_ARG 11 ; @ret
RET