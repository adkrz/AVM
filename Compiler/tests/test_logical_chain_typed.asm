; Addr row[]
; Addr col[]
; Addr box[]
; Byte num
; Byte ok
; Addr val
; Byte i
; Byte j
; Byte box_index
PUSHN 13
PUSH_REG 1
STORE_LOCAL16 0 ; row
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH_REG 1
STORE_LOCAL16 2 ; col
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH_REG 1
STORE_LOCAL16 4 ; box
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH16 #0
PUSH 3
STORE_LOCAL 6 ; num
PUSH16 #1
LOAD_LOCAL 6 ; num
EXTEND
LSH16
STORE_LOCAL16 8 ; val
PUSH 1
STORE_LOCAL 10 ; i
PUSH 2
STORE_LOCAL 11 ; j
PUSH 3
STORE_LOCAL 12 ; box_index
LOAD_LOCAL16 0 ; row
LOAD_LOCAL 10 ; i
EXTEND
MACRO_X216
ADD16
LOAD_GLOBAL16
LOAD_LOCAL16 8 ; val
AND16
DUP16
JT16 @cond1_expr_end
LOAD_LOCAL16 2 ; col
LOAD_LOCAL 11 ; j
EXTEND
MACRO_X216
ADD16
LOAD_GLOBAL16
LOAD_LOCAL16 8 ; val
AND16
OR16
DUP16
JT16 @cond1_expr_end
LOAD_LOCAL16 4 ; box
LOAD_LOCAL 12 ; box_index
EXTEND
MACRO_X216
ADD16
LOAD_GLOBAL16
LOAD_LOCAL16 8 ; val
AND16
OR16
:cond1_expr_end
JF16 @if1_else
PUSH 0
STORE_LOCAL 7 ; ok
JMP @if1_endif
:if1_else
PUSH 1
STORE_LOCAL 7 ; ok
:if1_endif
HALT